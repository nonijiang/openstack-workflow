# nova boot
title Create Instance in Resource Tracker Workflow

### client 
client->nova_api:server create request
activate client
activate nova_api


### nova-api
## nova/api/openstack/compute/servers.py

# block device
# image
# reservation id
# network
# flavor
# nova/api/openstack/compute/servers.create()
note over nova_api: get flavor id
note over nova_api: get instance type

## nova/compute/api.py
# create()
# _create_instance()
# bdm:block device mappings
# nova/compute/api._provision_instances()
note over nova_api: check request image status,min_ram,min_disk

# database
# nova/compute/api.create_db_entry_for_new_instance()
nova_api->database:create db entry for new instance
# nova/compute/api._create_block_device_mapping()
nova_api->database:create block device mapping

# nova/compute/api._create_instance()
note over nova_api:update instance state to CREATE

# nova/conductor/api.py
# nova/conductor/rpcapi.py

# cast 
# nova/conductor/api.build_instance()
nova_api->nova_conductor: build_instance
activate nova_conductor
nova_api->client:response
deactivate nova_api
deactivate client

### nova-conductor
# nova/conductor/manager.py
# build_instance()

# nova/scheduler/client/__init__.py
# --
# nova/scheduler/client/query.py
# nova/scheduler/rpcapi.py
 
### nova-scheduler
# nova/scheduler/rpcapi.select_destinations()
nova_conductor->nova_scheduler:select_destinations
activate nova_scheduler
# nova/scheduler/host_manager.py
note over nova_scheduler: chose hosts from weighed hosts

### nova-conductor
# nova/scheduler/rpcapi.select_destinations()
nova_scheduler->nova_conductor:return selected destinations
deactivate nova_scheduler

# nova/conductor/manager.targets_cell()
note over nova_conductor: connecte instances and hosts

# nova/compute/rpcapi.build_and_run_instance()
nova_conductor->nova_compute:build_and_run_instance
activate nova_compute
deactivate nova_conductor

### nova-compute
# nova/compute/manager.py
nova_compute->database:vm_state=BUILDING\ntask_state=None
# nova/compute/manager.pre_start_hook()
# nova/compute/manager.update_available_resource()
note over nova_compute: get available node
# nova/compute/resource_tracker.update_available_resource()
# nova/compute/resource_tracker._update_available_resource()
# nova/virt/libvirt/driver.get_available_resource()
note over nova_compute: get resource tracker
# nova/virt/libvirt/driver.spawn()

note over nova_compute:  resource tracker claim resource
note over nova_compute: update resource tracker

## nova/compute/manager.py _build_network_for_instance
#
### network
#
## nova/network/__init__.py 
## nova/network/neutronv2/api.py API()
#nova_compute->neutron:get available network
#nova_compute->neutron:list security groups
#nova_compute->neutron:create port

### block device mapping
#nova_compute->database:vm_state=BUILDING\n task_state=BLOCK_DEVICE_MAPPING
#note over nova_compute:setup the block device for an instance
#nova_compute->database:vm_state=BUIDING\ntask_state=SPAWNING

## libvirt 
nova_compute->libvirt:spawn
note over libvirt: get vCPU status
note over libvirt: get Memory status
note over libvirt: get Disk(local_gb) status
note over libvirt: get PCI Passthrough Devices
note over libvirt: create image(disk,swap,etc.)
note over libvirt: create config drive
note over libvirt:generate libvirt guest xml
## nova-compute 
libvirt->nova_compute:when the instance state is RUNNING
nova_compute->database:update instance after spawn
deactivate nova_compute
